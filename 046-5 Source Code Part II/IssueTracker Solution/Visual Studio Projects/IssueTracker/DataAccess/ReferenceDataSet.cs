//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DataAccess {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ReferenceDataSet : DataSet {
        
        private Val_IssueTypeDataTable tableVal_IssueType;
        
        private Val_MailMessageDataTable tableVal_MailMessage;
        
        private Val_PriorityDataTable tableVal_Priority;
        
        private Val_ReportsDataTable tableVal_Reports;
        
        private Val_StatusDataTable tableVal_Status;
        
        public ReferenceDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ReferenceDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Val_IssueType"] != null)) {
                    this.Tables.Add(new Val_IssueTypeDataTable(ds.Tables["Val_IssueType"]));
                }
                if ((ds.Tables["Val_MailMessage"] != null)) {
                    this.Tables.Add(new Val_MailMessageDataTable(ds.Tables["Val_MailMessage"]));
                }
                if ((ds.Tables["Val_Priority"] != null)) {
                    this.Tables.Add(new Val_PriorityDataTable(ds.Tables["Val_Priority"]));
                }
                if ((ds.Tables["Val_Reports"] != null)) {
                    this.Tables.Add(new Val_ReportsDataTable(ds.Tables["Val_Reports"]));
                }
                if ((ds.Tables["Val_Status"] != null)) {
                    this.Tables.Add(new Val_StatusDataTable(ds.Tables["Val_Status"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Val_IssueTypeDataTable Val_IssueType {
            get {
                return this.tableVal_IssueType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Val_MailMessageDataTable Val_MailMessage {
            get {
                return this.tableVal_MailMessage;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Val_PriorityDataTable Val_Priority {
            get {
                return this.tableVal_Priority;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Val_ReportsDataTable Val_Reports {
            get {
                return this.tableVal_Reports;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Val_StatusDataTable Val_Status {
            get {
                return this.tableVal_Status;
            }
        }
        
        public override DataSet Clone() {
            ReferenceDataSet cln = ((ReferenceDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Val_IssueType"] != null)) {
                this.Tables.Add(new Val_IssueTypeDataTable(ds.Tables["Val_IssueType"]));
            }
            if ((ds.Tables["Val_MailMessage"] != null)) {
                this.Tables.Add(new Val_MailMessageDataTable(ds.Tables["Val_MailMessage"]));
            }
            if ((ds.Tables["Val_Priority"] != null)) {
                this.Tables.Add(new Val_PriorityDataTable(ds.Tables["Val_Priority"]));
            }
            if ((ds.Tables["Val_Reports"] != null)) {
                this.Tables.Add(new Val_ReportsDataTable(ds.Tables["Val_Reports"]));
            }
            if ((ds.Tables["Val_Status"] != null)) {
                this.Tables.Add(new Val_StatusDataTable(ds.Tables["Val_Status"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableVal_IssueType = ((Val_IssueTypeDataTable)(this.Tables["Val_IssueType"]));
            if ((this.tableVal_IssueType != null)) {
                this.tableVal_IssueType.InitVars();
            }
            this.tableVal_MailMessage = ((Val_MailMessageDataTable)(this.Tables["Val_MailMessage"]));
            if ((this.tableVal_MailMessage != null)) {
                this.tableVal_MailMessage.InitVars();
            }
            this.tableVal_Priority = ((Val_PriorityDataTable)(this.Tables["Val_Priority"]));
            if ((this.tableVal_Priority != null)) {
                this.tableVal_Priority.InitVars();
            }
            this.tableVal_Reports = ((Val_ReportsDataTable)(this.Tables["Val_Reports"]));
            if ((this.tableVal_Reports != null)) {
                this.tableVal_Reports.InitVars();
            }
            this.tableVal_Status = ((Val_StatusDataTable)(this.Tables["Val_Status"]));
            if ((this.tableVal_Status != null)) {
                this.tableVal_Status.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ReferenceDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ReferenceDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableVal_IssueType = new Val_IssueTypeDataTable();
            this.Tables.Add(this.tableVal_IssueType);
            this.tableVal_MailMessage = new Val_MailMessageDataTable();
            this.Tables.Add(this.tableVal_MailMessage);
            this.tableVal_Priority = new Val_PriorityDataTable();
            this.Tables.Add(this.tableVal_Priority);
            this.tableVal_Reports = new Val_ReportsDataTable();
            this.Tables.Add(this.tableVal_Reports);
            this.tableVal_Status = new Val_StatusDataTable();
            this.Tables.Add(this.tableVal_Status);
        }
        
        private bool ShouldSerializeVal_IssueType() {
            return false;
        }
        
        private bool ShouldSerializeVal_MailMessage() {
            return false;
        }
        
        private bool ShouldSerializeVal_Priority() {
            return false;
        }
        
        private bool ShouldSerializeVal_Reports() {
            return false;
        }
        
        private bool ShouldSerializeVal_Status() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Val_IssueTypeRowChangeEventHandler(object sender, Val_IssueTypeRowChangeEvent e);
        
        public delegate void Val_MailMessageRowChangeEventHandler(object sender, Val_MailMessageRowChangeEvent e);
        
        public delegate void Val_PriorityRowChangeEventHandler(object sender, Val_PriorityRowChangeEvent e);
        
        public delegate void Val_ReportsRowChangeEventHandler(object sender, Val_ReportsRowChangeEvent e);
        
        public delegate void Val_StatusRowChangeEventHandler(object sender, Val_StatusRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_IssueTypeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTypeID;
            
            private DataColumn columnTypeLabel;
            
            internal Val_IssueTypeDataTable() : 
                    base("Val_IssueType") {
                this.InitClass();
            }
            
            internal Val_IssueTypeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            internal DataColumn TypeLabelColumn {
                get {
                    return this.columnTypeLabel;
                }
            }
            
            public Val_IssueTypeRow this[int index] {
                get {
                    return ((Val_IssueTypeRow)(this.Rows[index]));
                }
            }
            
            public event Val_IssueTypeRowChangeEventHandler Val_IssueTypeRowChanged;
            
            public event Val_IssueTypeRowChangeEventHandler Val_IssueTypeRowChanging;
            
            public event Val_IssueTypeRowChangeEventHandler Val_IssueTypeRowDeleted;
            
            public event Val_IssueTypeRowChangeEventHandler Val_IssueTypeRowDeleting;
            
            public void AddVal_IssueTypeRow(Val_IssueTypeRow row) {
                this.Rows.Add(row);
            }
            
            public Val_IssueTypeRow AddVal_IssueTypeRow(System.Guid TypeID, string TypeLabel) {
                Val_IssueTypeRow rowVal_IssueTypeRow = ((Val_IssueTypeRow)(this.NewRow()));
                rowVal_IssueTypeRow.ItemArray = new object[] {
                        TypeID,
                        TypeLabel};
                this.Rows.Add(rowVal_IssueTypeRow);
                return rowVal_IssueTypeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Val_IssueTypeDataTable cln = ((Val_IssueTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Val_IssueTypeDataTable();
            }
            
            internal void InitVars() {
                this.columnTypeID = this.Columns["TypeID"];
                this.columnTypeLabel = this.Columns["TypeLabel"];
            }
            
            private void InitClass() {
                this.columnTypeID = new DataColumn("TypeID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeID);
                this.columnTypeLabel = new DataColumn("TypeLabel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeLabel);
                this.columnTypeID.AllowDBNull = false;
            }
            
            public Val_IssueTypeRow NewVal_IssueTypeRow() {
                return ((Val_IssueTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Val_IssueTypeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Val_IssueTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Val_IssueTypeRowChanged != null)) {
                    this.Val_IssueTypeRowChanged(this, new Val_IssueTypeRowChangeEvent(((Val_IssueTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Val_IssueTypeRowChanging != null)) {
                    this.Val_IssueTypeRowChanging(this, new Val_IssueTypeRowChangeEvent(((Val_IssueTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Val_IssueTypeRowDeleted != null)) {
                    this.Val_IssueTypeRowDeleted(this, new Val_IssueTypeRowChangeEvent(((Val_IssueTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Val_IssueTypeRowDeleting != null)) {
                    this.Val_IssueTypeRowDeleting(this, new Val_IssueTypeRowChangeEvent(((Val_IssueTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVal_IssueTypeRow(Val_IssueTypeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_IssueTypeRow : DataRow {
            
            private Val_IssueTypeDataTable tableVal_IssueType;
            
            internal Val_IssueTypeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVal_IssueType = ((Val_IssueTypeDataTable)(this.Table));
            }
            
            public System.Guid TypeID {
                get {
                    return ((System.Guid)(this[this.tableVal_IssueType.TypeIDColumn]));
                }
                set {
                    this[this.tableVal_IssueType.TypeIDColumn] = value;
                }
            }
            
            public string TypeLabel {
                get {
                    try {
                        return ((string)(this[this.tableVal_IssueType.TypeLabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_IssueType.TypeLabelColumn] = value;
                }
            }
            
            public bool IsTypeLabelNull() {
                return this.IsNull(this.tableVal_IssueType.TypeLabelColumn);
            }
            
            public void SetTypeLabelNull() {
                this[this.tableVal_IssueType.TypeLabelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_IssueTypeRowChangeEvent : EventArgs {
            
            private Val_IssueTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public Val_IssueTypeRowChangeEvent(Val_IssueTypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Val_IssueTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_MailMessageDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMailMessageID;
            
            private DataColumn columnFormat;
            
            private DataColumn columnPriority;
            
            private DataColumn columnSubject;
            
            private DataColumn columnBody;
            
            internal Val_MailMessageDataTable() : 
                    base("Val_MailMessage") {
                this.InitClass();
            }
            
            internal Val_MailMessageDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MailMessageIDColumn {
                get {
                    return this.columnMailMessageID;
                }
            }
            
            internal DataColumn FormatColumn {
                get {
                    return this.columnFormat;
                }
            }
            
            internal DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            public Val_MailMessageRow this[int index] {
                get {
                    return ((Val_MailMessageRow)(this.Rows[index]));
                }
            }
            
            public event Val_MailMessageRowChangeEventHandler Val_MailMessageRowChanged;
            
            public event Val_MailMessageRowChangeEventHandler Val_MailMessageRowChanging;
            
            public event Val_MailMessageRowChangeEventHandler Val_MailMessageRowDeleted;
            
            public event Val_MailMessageRowChangeEventHandler Val_MailMessageRowDeleting;
            
            public void AddVal_MailMessageRow(Val_MailMessageRow row) {
                this.Rows.Add(row);
            }
            
            public Val_MailMessageRow AddVal_MailMessageRow(int MailMessageID, int Format, int Priority, string Subject, string Body) {
                Val_MailMessageRow rowVal_MailMessageRow = ((Val_MailMessageRow)(this.NewRow()));
                rowVal_MailMessageRow.ItemArray = new object[] {
                        MailMessageID,
                        Format,
                        Priority,
                        Subject,
                        Body};
                this.Rows.Add(rowVal_MailMessageRow);
                return rowVal_MailMessageRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Val_MailMessageDataTable cln = ((Val_MailMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Val_MailMessageDataTable();
            }
            
            internal void InitVars() {
                this.columnMailMessageID = this.Columns["MailMessageID"];
                this.columnFormat = this.Columns["Format"];
                this.columnPriority = this.Columns["Priority"];
                this.columnSubject = this.Columns["Subject"];
                this.columnBody = this.Columns["Body"];
            }
            
            private void InitClass() {
                this.columnMailMessageID = new DataColumn("MailMessageID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMailMessageID);
                this.columnFormat = new DataColumn("Format", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFormat);
                this.columnPriority = new DataColumn("Priority", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriority);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnBody = new DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBody);
                this.columnMailMessageID.AllowDBNull = false;
            }
            
            public Val_MailMessageRow NewVal_MailMessageRow() {
                return ((Val_MailMessageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Val_MailMessageRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Val_MailMessageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Val_MailMessageRowChanged != null)) {
                    this.Val_MailMessageRowChanged(this, new Val_MailMessageRowChangeEvent(((Val_MailMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Val_MailMessageRowChanging != null)) {
                    this.Val_MailMessageRowChanging(this, new Val_MailMessageRowChangeEvent(((Val_MailMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Val_MailMessageRowDeleted != null)) {
                    this.Val_MailMessageRowDeleted(this, new Val_MailMessageRowChangeEvent(((Val_MailMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Val_MailMessageRowDeleting != null)) {
                    this.Val_MailMessageRowDeleting(this, new Val_MailMessageRowChangeEvent(((Val_MailMessageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVal_MailMessageRow(Val_MailMessageRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_MailMessageRow : DataRow {
            
            private Val_MailMessageDataTable tableVal_MailMessage;
            
            internal Val_MailMessageRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVal_MailMessage = ((Val_MailMessageDataTable)(this.Table));
            }
            
            public int MailMessageID {
                get {
                    return ((int)(this[this.tableVal_MailMessage.MailMessageIDColumn]));
                }
                set {
                    this[this.tableVal_MailMessage.MailMessageIDColumn] = value;
                }
            }
            
            public int Format {
                get {
                    try {
                        return ((int)(this[this.tableVal_MailMessage.FormatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_MailMessage.FormatColumn] = value;
                }
            }
            
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableVal_MailMessage.PriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_MailMessage.PriorityColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableVal_MailMessage.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_MailMessage.SubjectColumn] = value;
                }
            }
            
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableVal_MailMessage.BodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_MailMessage.BodyColumn] = value;
                }
            }
            
            public bool IsFormatNull() {
                return this.IsNull(this.tableVal_MailMessage.FormatColumn);
            }
            
            public void SetFormatNull() {
                this[this.tableVal_MailMessage.FormatColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriorityNull() {
                return this.IsNull(this.tableVal_MailMessage.PriorityColumn);
            }
            
            public void SetPriorityNull() {
                this[this.tableVal_MailMessage.PriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableVal_MailMessage.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableVal_MailMessage.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsBodyNull() {
                return this.IsNull(this.tableVal_MailMessage.BodyColumn);
            }
            
            public void SetBodyNull() {
                this[this.tableVal_MailMessage.BodyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_MailMessageRowChangeEvent : EventArgs {
            
            private Val_MailMessageRow eventRow;
            
            private DataRowAction eventAction;
            
            public Val_MailMessageRowChangeEvent(Val_MailMessageRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Val_MailMessageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_PriorityDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPriorityID;
            
            private DataColumn columnPriorityLabel;
            
            internal Val_PriorityDataTable() : 
                    base("Val_Priority") {
                this.InitClass();
            }
            
            internal Val_PriorityDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PriorityIDColumn {
                get {
                    return this.columnPriorityID;
                }
            }
            
            internal DataColumn PriorityLabelColumn {
                get {
                    return this.columnPriorityLabel;
                }
            }
            
            public Val_PriorityRow this[int index] {
                get {
                    return ((Val_PriorityRow)(this.Rows[index]));
                }
            }
            
            public event Val_PriorityRowChangeEventHandler Val_PriorityRowChanged;
            
            public event Val_PriorityRowChangeEventHandler Val_PriorityRowChanging;
            
            public event Val_PriorityRowChangeEventHandler Val_PriorityRowDeleted;
            
            public event Val_PriorityRowChangeEventHandler Val_PriorityRowDeleting;
            
            public void AddVal_PriorityRow(Val_PriorityRow row) {
                this.Rows.Add(row);
            }
            
            public Val_PriorityRow AddVal_PriorityRow(System.Guid PriorityID, string PriorityLabel) {
                Val_PriorityRow rowVal_PriorityRow = ((Val_PriorityRow)(this.NewRow()));
                rowVal_PriorityRow.ItemArray = new object[] {
                        PriorityID,
                        PriorityLabel};
                this.Rows.Add(rowVal_PriorityRow);
                return rowVal_PriorityRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Val_PriorityDataTable cln = ((Val_PriorityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Val_PriorityDataTable();
            }
            
            internal void InitVars() {
                this.columnPriorityID = this.Columns["PriorityID"];
                this.columnPriorityLabel = this.Columns["PriorityLabel"];
            }
            
            private void InitClass() {
                this.columnPriorityID = new DataColumn("PriorityID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriorityID);
                this.columnPriorityLabel = new DataColumn("PriorityLabel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriorityLabel);
                this.columnPriorityID.AllowDBNull = false;
            }
            
            public Val_PriorityRow NewVal_PriorityRow() {
                return ((Val_PriorityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Val_PriorityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Val_PriorityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Val_PriorityRowChanged != null)) {
                    this.Val_PriorityRowChanged(this, new Val_PriorityRowChangeEvent(((Val_PriorityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Val_PriorityRowChanging != null)) {
                    this.Val_PriorityRowChanging(this, new Val_PriorityRowChangeEvent(((Val_PriorityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Val_PriorityRowDeleted != null)) {
                    this.Val_PriorityRowDeleted(this, new Val_PriorityRowChangeEvent(((Val_PriorityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Val_PriorityRowDeleting != null)) {
                    this.Val_PriorityRowDeleting(this, new Val_PriorityRowChangeEvent(((Val_PriorityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVal_PriorityRow(Val_PriorityRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_PriorityRow : DataRow {
            
            private Val_PriorityDataTable tableVal_Priority;
            
            internal Val_PriorityRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVal_Priority = ((Val_PriorityDataTable)(this.Table));
            }
            
            public System.Guid PriorityID {
                get {
                    return ((System.Guid)(this[this.tableVal_Priority.PriorityIDColumn]));
                }
                set {
                    this[this.tableVal_Priority.PriorityIDColumn] = value;
                }
            }
            
            public string PriorityLabel {
                get {
                    try {
                        return ((string)(this[this.tableVal_Priority.PriorityLabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_Priority.PriorityLabelColumn] = value;
                }
            }
            
            public bool IsPriorityLabelNull() {
                return this.IsNull(this.tableVal_Priority.PriorityLabelColumn);
            }
            
            public void SetPriorityLabelNull() {
                this[this.tableVal_Priority.PriorityLabelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_PriorityRowChangeEvent : EventArgs {
            
            private Val_PriorityRow eventRow;
            
            private DataRowAction eventAction;
            
            public Val_PriorityRowChangeEvent(Val_PriorityRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Val_PriorityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_ReportsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnReportID;
            
            private DataColumn columnReportLabel;
            
            private DataColumn columnReportFilePath;
            
            internal Val_ReportsDataTable() : 
                    base("Val_Reports") {
                this.InitClass();
            }
            
            internal Val_ReportsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ReportIDColumn {
                get {
                    return this.columnReportID;
                }
            }
            
            internal DataColumn ReportLabelColumn {
                get {
                    return this.columnReportLabel;
                }
            }
            
            internal DataColumn ReportFilePathColumn {
                get {
                    return this.columnReportFilePath;
                }
            }
            
            public Val_ReportsRow this[int index] {
                get {
                    return ((Val_ReportsRow)(this.Rows[index]));
                }
            }
            
            public event Val_ReportsRowChangeEventHandler Val_ReportsRowChanged;
            
            public event Val_ReportsRowChangeEventHandler Val_ReportsRowChanging;
            
            public event Val_ReportsRowChangeEventHandler Val_ReportsRowDeleted;
            
            public event Val_ReportsRowChangeEventHandler Val_ReportsRowDeleting;
            
            public void AddVal_ReportsRow(Val_ReportsRow row) {
                this.Rows.Add(row);
            }
            
            public Val_ReportsRow AddVal_ReportsRow(System.Guid ReportID, string ReportLabel, string ReportFilePath) {
                Val_ReportsRow rowVal_ReportsRow = ((Val_ReportsRow)(this.NewRow()));
                rowVal_ReportsRow.ItemArray = new object[] {
                        ReportID,
                        ReportLabel,
                        ReportFilePath};
                this.Rows.Add(rowVal_ReportsRow);
                return rowVal_ReportsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Val_ReportsDataTable cln = ((Val_ReportsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Val_ReportsDataTable();
            }
            
            internal void InitVars() {
                this.columnReportID = this.Columns["ReportID"];
                this.columnReportLabel = this.Columns["ReportLabel"];
                this.columnReportFilePath = this.Columns["ReportFilePath"];
            }
            
            private void InitClass() {
                this.columnReportID = new DataColumn("ReportID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReportID);
                this.columnReportLabel = new DataColumn("ReportLabel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReportLabel);
                this.columnReportFilePath = new DataColumn("ReportFilePath", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReportFilePath);
                this.columnReportID.AllowDBNull = false;
            }
            
            public Val_ReportsRow NewVal_ReportsRow() {
                return ((Val_ReportsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Val_ReportsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Val_ReportsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Val_ReportsRowChanged != null)) {
                    this.Val_ReportsRowChanged(this, new Val_ReportsRowChangeEvent(((Val_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Val_ReportsRowChanging != null)) {
                    this.Val_ReportsRowChanging(this, new Val_ReportsRowChangeEvent(((Val_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Val_ReportsRowDeleted != null)) {
                    this.Val_ReportsRowDeleted(this, new Val_ReportsRowChangeEvent(((Val_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Val_ReportsRowDeleting != null)) {
                    this.Val_ReportsRowDeleting(this, new Val_ReportsRowChangeEvent(((Val_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVal_ReportsRow(Val_ReportsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_ReportsRow : DataRow {
            
            private Val_ReportsDataTable tableVal_Reports;
            
            internal Val_ReportsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVal_Reports = ((Val_ReportsDataTable)(this.Table));
            }
            
            public System.Guid ReportID {
                get {
                    return ((System.Guid)(this[this.tableVal_Reports.ReportIDColumn]));
                }
                set {
                    this[this.tableVal_Reports.ReportIDColumn] = value;
                }
            }
            
            public string ReportLabel {
                get {
                    try {
                        return ((string)(this[this.tableVal_Reports.ReportLabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_Reports.ReportLabelColumn] = value;
                }
            }
            
            public string ReportFilePath {
                get {
                    try {
                        return ((string)(this[this.tableVal_Reports.ReportFilePathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_Reports.ReportFilePathColumn] = value;
                }
            }
            
            public bool IsReportLabelNull() {
                return this.IsNull(this.tableVal_Reports.ReportLabelColumn);
            }
            
            public void SetReportLabelNull() {
                this[this.tableVal_Reports.ReportLabelColumn] = System.Convert.DBNull;
            }
            
            public bool IsReportFilePathNull() {
                return this.IsNull(this.tableVal_Reports.ReportFilePathColumn);
            }
            
            public void SetReportFilePathNull() {
                this[this.tableVal_Reports.ReportFilePathColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_ReportsRowChangeEvent : EventArgs {
            
            private Val_ReportsRow eventRow;
            
            private DataRowAction eventAction;
            
            public Val_ReportsRowChangeEvent(Val_ReportsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Val_ReportsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_StatusDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStatusID;
            
            private DataColumn columnStatusLabel;
            
            internal Val_StatusDataTable() : 
                    base("Val_Status") {
                this.InitClass();
            }
            
            internal Val_StatusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StatusIDColumn {
                get {
                    return this.columnStatusID;
                }
            }
            
            internal DataColumn StatusLabelColumn {
                get {
                    return this.columnStatusLabel;
                }
            }
            
            public Val_StatusRow this[int index] {
                get {
                    return ((Val_StatusRow)(this.Rows[index]));
                }
            }
            
            public event Val_StatusRowChangeEventHandler Val_StatusRowChanged;
            
            public event Val_StatusRowChangeEventHandler Val_StatusRowChanging;
            
            public event Val_StatusRowChangeEventHandler Val_StatusRowDeleted;
            
            public event Val_StatusRowChangeEventHandler Val_StatusRowDeleting;
            
            public void AddVal_StatusRow(Val_StatusRow row) {
                this.Rows.Add(row);
            }
            
            public Val_StatusRow AddVal_StatusRow(System.Guid StatusID, string StatusLabel) {
                Val_StatusRow rowVal_StatusRow = ((Val_StatusRow)(this.NewRow()));
                rowVal_StatusRow.ItemArray = new object[] {
                        StatusID,
                        StatusLabel};
                this.Rows.Add(rowVal_StatusRow);
                return rowVal_StatusRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Val_StatusDataTable cln = ((Val_StatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Val_StatusDataTable();
            }
            
            internal void InitVars() {
                this.columnStatusID = this.Columns["StatusID"];
                this.columnStatusLabel = this.Columns["StatusLabel"];
            }
            
            private void InitClass() {
                this.columnStatusID = new DataColumn("StatusID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusID);
                this.columnStatusLabel = new DataColumn("StatusLabel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusLabel);
                this.columnStatusID.AllowDBNull = false;
            }
            
            public Val_StatusRow NewVal_StatusRow() {
                return ((Val_StatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Val_StatusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Val_StatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Val_StatusRowChanged != null)) {
                    this.Val_StatusRowChanged(this, new Val_StatusRowChangeEvent(((Val_StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Val_StatusRowChanging != null)) {
                    this.Val_StatusRowChanging(this, new Val_StatusRowChangeEvent(((Val_StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Val_StatusRowDeleted != null)) {
                    this.Val_StatusRowDeleted(this, new Val_StatusRowChangeEvent(((Val_StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Val_StatusRowDeleting != null)) {
                    this.Val_StatusRowDeleting(this, new Val_StatusRowChangeEvent(((Val_StatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVal_StatusRow(Val_StatusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_StatusRow : DataRow {
            
            private Val_StatusDataTable tableVal_Status;
            
            internal Val_StatusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVal_Status = ((Val_StatusDataTable)(this.Table));
            }
            
            public System.Guid StatusID {
                get {
                    return ((System.Guid)(this[this.tableVal_Status.StatusIDColumn]));
                }
                set {
                    this[this.tableVal_Status.StatusIDColumn] = value;
                }
            }
            
            public string StatusLabel {
                get {
                    try {
                        return ((string)(this[this.tableVal_Status.StatusLabelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVal_Status.StatusLabelColumn] = value;
                }
            }
            
            public bool IsStatusLabelNull() {
                return this.IsNull(this.tableVal_Status.StatusLabelColumn);
            }
            
            public void SetStatusLabelNull() {
                this[this.tableVal_Status.StatusLabelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Val_StatusRowChangeEvent : EventArgs {
            
            private Val_StatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public Val_StatusRowChangeEvent(Val_StatusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Val_StatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
